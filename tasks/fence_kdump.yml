---
- name: Enable kdump service
  service:
    name: "{{ kdump_service_name }}"
    state: 'started'
    enabled: true

- name: Configure separate stonith devices per cluster node
  when: cluster_configure_stonith_style is not defined or cluster_configure_stonith_style == 'one-device-per-node'
  block:
    - name: create fence_kdump STONITH devices
      pcs_resource:
        name: "fence-kdump-{{ hostvars[item][cluster_hostname_fact] }}"
        resource_class: 'stonith'
        resource_type: 'fence_kdump'
        options: "pcmk_host_list={{ hostvars[item][cluster_hostname_fact] }} {% if ansible_distribution == 'Debian' %}pcmk_monitor_action=metadata{% endif %}"
      with_items: "{{ play_hosts }}"
      run_once: true
      # FIXME: fence_kdump on Debian returns exit code 1 for 'monitor' op so we use 'metadata' as dummy replacement

    - name: create fence constraints
      pcs_constraint_location:
        resource: "fence-kdump-{{ hostvars[item][cluster_hostname_fact] }}"
        node_name: "{{ hostvars[item][cluster_hostname_fact] }}"
        score: '-INFINITY'
      with_items: '{{ play_hosts }}'
      run_once: true

- name: Configure single stonith device for all nodes
  when: cluster_configure_stonith_style is defined and cluster_configure_stonith_style == 'one-device-per-cluster'
  block:
    - name: create fence_kdump STONITH device
      pcs_resource:
        name: "fence-kdump"
        resource_class: 'stonith'
        resource_type: 'fence_kdump'
        options: >-
          pcmk_host_map="{% for item in groups['cluster'+rand_id+'_node_is_remote_False'] %}{{ hostvars[item][cluster_hostname_fact] }}:{{ hostvars[item]['vm_name'] }};{% endfor %}"
      run_once: true
